<?xml version="1.0" encoding="US-ASCII"?>
<!-- This template is for creating an Internet Draft using xml2rfc,
     which is available here: http://xml.resource.org. -->
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
  <!-- One method to get references from the online citation libraries.
     There has to be one entity for each item to be referenced.
     An alternate method (rfc include) is described in the references. -->
  <!ENTITY RFC2119 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
  <!ENTITY RFC3552 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3552.xml">
  <!ENTITY RFC3986 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3986.xml">
  <!ENTITY RFC5226 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5226.xml">
  <!ENTITY RFC5234 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5234.xml">
  ]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs),
     please see http://xml.resource.org/authoring/README.html. -->
<!-- Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.
     (Here they are set differently than their defaults in xml2rfc v1.32) -->
<?rfc strict="yes" ?>
<!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC) -->
<?rfc toc="yes"?>
<!-- generate a ToC -->
<?rfc tocdepth="4"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references -->
<?rfc symrefs="yes"?>
<!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes" ?>
<!-- sort the reference entries alphabetically -->
<!-- control vertical white space
     (using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="no" ?>
<!-- do not start each main section on a new page -->
<?rfc subcompact="no" ?>
<!-- keep one blank line between list items -->
<!-- end of list of popular I-D processing instructions -->
<?rfc private="" ?>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt"?>
<rfc category="exp" docName="draft-irtf-icnrg-ccnxsemantics-latest" ipr="trust200902">
  <!-- category values: std, bcp, info, exp, and historic
       ipr values: trust200902, noModificationTrust200902, noDerivativesTrust200902,
       or pre5378Trust200902
       you can add the attributes updates="NNNN" and obsoletes="NNNN"
       they will automatically be output with "(if approved)" -->
  <!-- ***** FRONT MATTER ***** -->
  <front>
    <!-- The abbreviated title is used in the page header - it is only necessary if the
         full title is longer than 39 characters -->
    <title abbrev="CCNx Semantics">CCNx Semantics</title>
    <!-- add 'role="editor"' below for the editors if appropriate -->
    <!-- Another author who claims to be an editor -->
    <author fullname="Marc Mosko" initials="M.E." surname="Mosko">
      <organization>PARC, Inc.</organization>
      <address>
        <postal>
          <street/>
          <!-- Reorder these if your country does things differently -->
          <city>Palo Alto</city>
          <region>California</region>
          <code>94304</code>
          <country>USA</country>
        </postal>
        <phone>+01 650-812-4405</phone>
        <email>marc.mosko@parc.com</email>
        <!-- uri and facsimile elements may also be added -->
      </address>
    </author>
    <author fullname="Ignacio Solis" initials="I." surname="Solis">
      <organization>LinkedIn</organization>
      <address>
       <postal>
          <street></street>
         <!-- Reorder these if your country does things differently -->
         <city>Mountain View</city>
         <region>California</region>
         <code>94043</code>
         <country>USA</country>
       </postal>
       <phone></phone>
       <email>nsolis@linkedin.com</email>
       <!-- uri and facsimile elements may also be added -->
     </address>
    </author>
    <author fullname="Christopher A. Wood" initials="C.A." surname="Wood">
      <organization>University of California Irvine</organization>
      <address>
       <postal>
         <street/>
         <!-- Reorder these if your country does things differently -->
         <city>Irvine</city>
         <region>California</region>
         <code>92697</code>
         <country>USA</country>
       </postal>
       <phone>+01 315-806-5939</phone>
       <email>woodc1@uci.edu</email>
     </address>
    </author>

    <date/>

    <!-- If the month and year are both specified and are the current ones, xml2rfc will fill
         in the current day for you. If only the current year is specified, xml2rfc will fill
         in the current day and month for you. If the year is not the current one, it is
         necessary to specify at least a month (xml2rfc assumes day="1" if not specified for the
         purpose of calculating the expiry date).  With drafts it is normally sufficient to
         specify just the year. -->
    <!-- Meta-data Declarations -->
    <area>General</area>
    <workgroup>ICNRG</workgroup>
    <!-- WG name at the upperleft corner of the doc,
         IETF is fine for individual submissions.
         If this element is not present, the default is "Network Working Group",
         which is used by the RFC Editor as a nod to the history of the IETF. -->
    <keyword>Content Centric Networking</keyword>
    <!-- Keywords will be incorporated into HTML output
         files in a meta tag but they have no effect on text or nroff
         output. If you submit your draft to the RFC Editor, the
         keywords will be used for the search engine. -->
    <abstract>
      <t>This document describes the core concepts of the CCNx architecture and presents
        a minimum network protocol based on two messages: Interests and Content Objects.
        It specifies the set of mandatory and optional fields within those messages
        and describes their behavior and interpretation. This architecture and protocol
        specification is independent of a specific wire encoding.</t>
      <t>The protocol also uses a Control message called an InterestReturn, whereby
        one system can return an Interest message to the previous hop due to an
        error condition.  This indicates to the previous hop that the current system will
        not respond to the Interest.</t>
    </abstract>
  </front>
  <middle>
    <section title="Introduction">
      <t>This document describes the principles of the CCNx architecture. It describes the network protocol
        based on two message types: Interests and Content Objects.  The description is not
        dependent on a specific wire format or particular encodings.  This section introduces
        the main concepts of CCNx, which are further elaborated in the remainder of
        the document.
      </t>
      <section title="Requirements Language">
        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD
          NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as
          described in <xref target="RFC2119">RFC 2119</xref>.</t>
      </section>
      <section title="Protocol Overview">
        <t>CCNx is a request and response protocol to fetch chunks of data using
       a name. The integrity of each chunk may be directly asserted through a digital
       signature or message authentication code (MAC), or, alternatively,
       indirectly via hash chains. Chunks may also carry weaker message
       integrity checks (MICs) or no integrity protection mechanism at all.
       Because provenance information is carried with each chunk
       (or larger indirectly protected block), we no longer need to rely on host
       identities, such as those derived from TLS certificates, to ascertain
       the chunk legitimacy. Data integrity is therefore a core feature of CCNx; it
       does not rely on the data transmission channel. There are several options
       for data confidentiality, discussed later.
        </t>
        <t>As a request and response protocol, CCNx may be carried over many different transports.  In
          use today are Ethernet, TCP, UDP, 802.15.4, GTP, GRE, DTLS, TLS, and others.  While the
          specific wire format of CCNx may vary to some extent based on transport, the core principles and
          behaviors of CCNx outlined in this document should remain fixed.
        </t>
        <t>CCNx uses hierarchical names to identify bytes of payload.
          The Name combines a routable prefix with an arbitrary application-dependent
          suffix assigned by the publisher to a piece of content.
          The result is a "named payload".
          This is different from other systems that use only self-certifying names, where the payload name is intrinsically
          derivable from the payload or its realization in a network object
          (e.g., a SHA-256 hash of the payload or network object).
          In human-readable form, we represent names as a <xref target="CCNxURI">"ccnx:"</xref>
          scheme URI <xref target="RFC3986"/>,
          though the canonical encoding should be octet strings.  In this respect, we speak of
          a name being made up of hierarchical path segments, which is the URI terminology.
        </t>
        <t>This document only defines the general properties of CCNx names.
          In some isolated environments, CCNx users may be able to use any name they choose and
          either inject that name (or prefix) into a routing protocol or use other information foraging techniques.
          In the Internet environment, there will be policies around the formats of names and assignments of names
          to publishers, though those are not specified here.
        </t>
        <t>The key concept of CCNx is that a subjective name is (cryptographically)
           bound to a fixed payload. These (publisher-generated) bindings can
           therefore be (cryptographically) verified. For example, a
           publisher could compute a cryptographic hash over the name and payload,
           sign the hash, and deliver the tuple {Name, Payload, Validation}.
           Consumers of this data can check the binding integrity by re-computing
           the same cryptographic hash and verifying the digital signature in Validation.
           Additional information would be included as needed by specific
           validation mechanisms.  Therefore, we divide Validation in to a
           ValidationAlgorithm and a ValidationPayload.  The ValidationAlgorithm
           has information about the crypto suite and parameters.  In
           particular, the ValidationAlgorithm usually has a field called KeyId
           which identifies the public key used by the validation, when
           applicable.  The ValidationPayload is the output of the validation
           algorithm, such as a CRC value, an HMAC output, or an RSA signature.
       </t>
        <t>In addition to the essential Name, Payload, and Validation sections, a CCNx user may need
          to include some other signaling information.  This could include a hint about the type of
          Payload (e.g., application data, a cryptographic key, etc.) or cache control directives, etc.
          We will call this extra signaling information ExtraFields.
        </t>
        <t>A named payload is thus the tuple {{Name, ExtraFields, Payload, ValidationAlgorithm}, ValidationPayload},
          where all fields in the inner tuple are covered by the validation algorithm.</t>

        <t>CCNx specifies a network protocol around Interests (request messages) and Content Objects
          (response messages) to move named payloads.  An Interest
          includes the Name -- which identifies the desired response -- and two optional limiting restrictions.
          The first restriction on the KeyId to limit responses to those signed with a
          ValidationAlgorithm KeyId field equal to the restriction.
          The second is the ContentObjectHash restriction, which limits the response to one where the
          cryptographic hash of the entire named payload is equal to the restriction.
        </t>
        <t>The hierarchy of a CCNx Name is used for routing via the longest matching
          prefix in a Forwarder.  The longest matching prefix is computed name segment by
          name segment in the hierarchical path name, where each name segment must
          be exactly equal to match.
          There is no requirement that the prefix be globally routable.  Within
          a deployment any local routing may be used, even one that only uses
          a single flat (non-hierarchical) name segment.
        </t>
        <t>Another concept of CCNx is that there should be flow balance
          between Interest messages and Content Object messages.  At the network level,
          an Interest traveling along a single path should elicit no more than one
          Content Object response.  If some node sends the Interest along more than one
          path, that node should consolidate the responses such that only one
          Content Object flows back towards the requester.
          If an Interest is sent broadcast or multicast on a multiple-access media, the
          sender should be prepared for multiple responses unless some other media-dependent
          mechanism like gossip suppression or leader election is used.
        </t>
        <t>
          As an Interest travels the forward path following the Forwarding Information
          Base (FIB), it establishes state at each forwarder such that a Content Object
          response can trace its way back to the original requester(s) without the
          requester needing to include a routable return address.
          We use the notional Pending Interest Table (PIT) as a method to store state that
          facilitates the return of a Content Object.  The PIT table is not mandated by
          the specification.
        </t>
        <t>The notional PIT table stores the last hop of an Interest plus its Name
          and optional restrictions.  This is the data required to match a Content Object
          to an Interest (see <xref target="matching"/>).
          When a Content Object arrives, it must be matched against the PIT to determine
          which entries it satisfies.  For each such entry, at most one copy of the
          Content Object is sent to each listed last hop in the PIT entries.
        </t>
        <t>If multiple Interests with the same {Name, KeyIdRestriction, ContentObjectHashRestriction} tuple
          arrive at a node before a Content Object matching the first Interest comes back,
          they are grouped in the same PIT entry and their last hops aggregated (see <xref target="aggregation"/>).
          Thus, one Content Object might satisfy multiple pending Interests in a PIT.
        </t>
        <t>In CCNx, higher-layer protocols often become so-called "name-based protocols" because
          they operate on the CCNx Name.  For example, a versioning protocol might append additional
          name segments to convey state about the version of payload.  A content discovery protocol
          might append certain protocol-specific name segments to a prefix to discover content
          under that prefix.  Many such protocols may exist and apply their own rules to
          Names. They may be layered with each protocol encapsulating (to the left) a higher layer's Name prefix.
        </t>
        <t>This document also describes a control message called an InterestReturn.
          A network element may return an Interest message
          to a previous hop if there is an error processing the Interest. The returned Interest may be
          further processed at the previous hop or returned towards the Interest origin.
          When a node returns an Interest it indicates that the previous hop should not expect a response
          from that node for the Interest, i.e., there is no PIT entry left at the returning node for
          a Content Object to follow.
        </t>
        <t>There are multiple ways to describe larger objects in CCNx.  Some options may use the namespace while
          others may use a structure such as a Manifest.  This document does not address these options at this time.
        </t>
        <t>The remainder of this document describes a named payload as well as the Interest and Content Object
          network protocol behavior in detail.
        </t>
      </section>
    </section>
    <section anchor="protocol" title="Protocol">
      <t>CCNx is a request and response protocol. A request is called an Interest
        and a response is called a ContentObject.  CCNx also uses a 1-hop control
        message called InterestReturn.  These are, as a group, called CCNx Messages.</t>

      <section anchor="grammar" title="Message Grammar">
        <t>
          The CCNx message <xref target="RFC5234">ABNF</xref> grammar is
          show in <xref target="abnfgrammar"/>.  The grammar does not include any
          encoding delimiters, such as TLVs.  Specific
          wire encodings are given in a separate document.  If a Validation section exists,
          the Validation Algorithm covers from the Body (BodyName or BodyOptName) through the
          end of the ValidationAlg section.  The InterestLifetime, CacheTime, and
          Return Code fields exist outside of the validation envelope and may be modified.
        </t>

        <t>The various fields -- in alphabetical order -- are defined as:
          <list style="symbols">
            <t>AbsTime: Absolute times are conveyed as the 64-bit UTC time in milliseconds
              since the epoch (standard POSIX time).
            </t>
            <t>CacheTime: The absolute time after which the publisher
              believes there is low value in caching the content object.  This is a recommendation
              to caches (see <xref target="cachecontrol"/>).
            </t>
            <t>ConObjField: These are optional fields that may appear in a Content Object.
            </t>
            <t>ConObjHash: The value of the Content Object Hash, which is the SHA256-32 over
              the message from the beginning of the body to the end of the message.  Note that this
              coverage area is different from the ValidationAlg.  This value SHOULD NOT be trusted
              across domains (see <xref target="ConObjHash"/>).
            </t>
            <t>ExpiryTime: An absolute time after which the
              content object should be considered expired (see <xref target="cachecontrol"/>).
            </t>
            <t>HopLimit: Interest messages may loop if there are loops in the forwarding plane.
              To eventually terminate loops, each Interest carries a HopLimit that is decremented
              after each hop and no longer forwarded when it reaches zero.  See <xref target="forwarder"/>.
            </t>
            <t>InterestField: These are optional fields that may appear in an Interest
              message.
            </t>
            <t>KeyIdRestr: The KeyId Restriction.  A Content Object must have a KeyId with
              the same value as the restriction.
            </t>
            <t>ObjHashRestr: The Content Object Hash Restriction.  A content object must hash
              to the same value as the restriction using the same HashType.  The ObjHashRestr MUST
              use SHA256-32.
            </t>
            <t>KeyId: An identifier for the key used in the ValidationAlg.  For public key systems,
              this should be the SHA-256 hash of the public key.  For symmetric key systems, it
              should be an identifer agreed upon by the parties.
            </t>
            <t>KeyLink: A Link (see <xref target="link"/>) that names how to retrieve the key
              used to verify the ValidationPayload.  A message SHOULD NOT have both a KeyLink
              and a PublicKey.
            </t>
            <t>Lifetime: The approximate time during which a requester is willing to wait for
              a response, usually measured in seconds.  It is not strongly related to the network round
              trip time, though it must necessarily be larger.
            </t>
            <t>Name: A name is made up of a non-empty first segment followed by zero or
              more additional segments, which may be of 0 length.  Path segments are opaque
              octet strings, and are thus case-sensitive if encoding UTF-8.
              An Interest MUST have a Name.  A ContentObject MAY have a Name (see <xref target="matching"/>).
              The segments of a name are said to be complete if its segments uniquely identify a
              single Content Object. A name is exact if its segments are complete. An Interest
              carrying a full name is one which specifies an exact name and the ObjHashRestr
              of the corresponding Content Object.
            </t>
            <t>Payload: The message's data, as defined by PayloadType.
            </t>
            <t>PayloadType: The format of the Payload.  If missing, assume DataType.  DataType
              means the payload is opaque application bytes.  KeyType means the payload is
              a DER-encoded public key.  LinkType means it is one or more Links (see <xref target="link"/>).
            </t>
            <t>PublicKey: Some applications may wish to embed the public key used to
              verify the signature within the message itself.  The PublickKey is DER encoded.
              A message SHOULD NOT have both a KeyLink and a PublicKey.
            </t>
            <t>RelTime: A relative time, measured in milli-seconds.
            </t>
            <t>ReturnCode: States the reason an Interest message is being returned
              to the previous hop (see <xref target="TypeDefinitions"/>).
            </t>
            <t>SigTime: The absolute time (UTC milliseconds) when the signature was
              generated.
            </t>
            <t>Hash: Hash values carried in a Message carry a HashType to identify the algorithm
              used to generate the hash followed by the hash value.  This form is to allow
              hash agility.  Some fields may mandate a specific HashType.
            </t>
          </list>
        </t>


       <figure anchor="abnfgrammar">
        <artwork align="left"><![CDATA[
Message       := Interest / ContentObject / InterestReturn
Interest      := HopLimit [Lifetime] BodyName [Validation]
ContentObject := [CacheTime / ConObjHash] BodyOptName [Validation]
InterestReturn:= ReturnCode Interest
BodyName      := Name Common
BodyOptName   := [Name] Common
Common        := *Field [Payload]
Validation    := ValidationAlg ValidatonPayload

Name          := FirstSegment *Segment
FirstSegment  := 1* OCTET
Segment       := 0* OCTET

ValidationAlg := RSA-SHA256 HMAC-SHA256 CRC32C
ValidatonPayload := 1* OCTET
RSA-SHA256    := KeyId [PublicKey] [SigTime] [KeyLink]
HMAC-SHA256   := KeyId [SigTime] [KeyLink]
CRC32C        := [SigTime]

AbsTime       := 8 OCTET ; 64-bit UTC msec since epoch
CacheTime     := AbsTime
ConObjField   := ExpiryTime / PayloadType
ConObjHash    := Hash ; The Content Object Hash
DataType      := "1"
ExpiryTime    := AbsTime
Field         := InterestField / ConObjField
Hash          := HashType 1* OCTET
HashType      := SHA256-32 / SHA512-64 / SHA512-32
HopLimit      := OCTET
InterestField := KeyIdRestr / ObjHashRestr
KeyId         := 1* OCTET ; key identifier
KeyIdRestr    := 1* OCTET
KeyLink       := Link
KeyType       := "2"
Lifetime      := RelTime
Link          := Name [KeyIdResr] [ObjHashRestr]
LinkType      := "3"
ObjHashRestr  := Hash
Payload       := *OCTET
PayloadType   := DataType / KeyType / LinkType
PublicKey     := ; DER-encoded public key
RelTime       := 1* OCTET ; msec
ReturnCode    := ; see Section 10.2
SigTime       := AbsTime
]]></artwork>
      </figure>

      </section>

      <section anchor="consumer" title="Consumer Behavior">
        <t>
        To request a piece of content for a given {Name, [KeyIdRest],
        [ObjHashRestr]} tuple, a consumer creates an Interest message with those
        values.  It MAY add a validation section, typically only a CRC32C.
        A consumer MAY put a Payload field in an Interest to send additional
        data to the producer beyond what is in the Name.  The Name is used
        for routing and may be remembered at each hop in the notional PIT
        table to facilitate returning a content object; Storing large
        amounts of state in the Name could lead to high memory requirements.
        Because the Payload is not considered when forwarding an Interest or
        matching a Content Object to an Interest, a consumer SHOULD put an
        Interest Payload ID (see Section <xref target="ipid"/>) as part of the name to allow a
        forwarder to match Interests to content objects and avoid aggregating
        Interests with different payloads. Similarly, if a consumer uses
        a MAC or a signature, it SHOULD also include a unique segment
        as part of the name to prevent the Interest from being aggregated with
        other Interests or satisfied by a Content Object that has no relation
        to the validation.
        </t>

        <t>The consumer SHOULD specify an InterestLifetime, which is the length of time
          the consumer is willing to wait for a response.  The InterestLifetime is an
          application-scale time, not a network round trip time (see <xref target="aggregation"/>).
          If not present, the InterestLifetime will use a default value (TO_INTERESTLIFETIME).
        </t>
        <t>The consumer SHOULD set the Interest HopLimit to a reasonable value or use
           the default 255.  If the consumer knows the distances to the producer via
          routing, it SHOULD use that value.
        </t>
        <t>A consumer hands off the Interest to its first forwarder, which will then forward
          the Interest over the network to a publisher (or replica) that may satisfy it
          based on the name (see <xref target="forwarder"/>).
        </t>
        <t>Interest messages are unreliable.  A consumer SHOULD run a transport protocol
          that will retry the Interest if it goes unanswered, up to the InterestLifetime.
          No transport protocol is specified in this document.
        </t>
        <t>The network MAY send to the consumer an InterestReturn message that indicates the
          network cannot fulfill the Interest.  The ReturnCode specifies the reason for the
          failure, such as no route or congestion.  Depending on the ReturnCode, the consumer
          MAY retry the Interest or MAY return an error to the requesting application.
        </t>
        <t>If the content was found and returned by the first forwarder, the
          consumer will receive a ContentObject.  The consumer SHOULD:
          <list style="symbols">
            <t>Ensure the content object is properly formatted.
            </t>
            <t>Verify that the returned Name matches a pending request.  If the request
              also had KeyIdRestr and ObjHashRest, it should also validate those properties.
            </t>
            <t>If the content object is signed, it SHOULD cryptographically verify the signature.
              If it does not have the corresponding key, it SHOULD fetch the key, such as from
              a key resolution service or via the KeyLink.
            </t>
            <t>If the signature has a SigTime, the consumer MAY use that in considering
              if the signature is valid.  For example, if the consumer is asking for dynamically
              generated content, it should expect the SigTime to not be before the time
              the Interest was generated.
            </t>
            <t>If the content object is signed, it should assert the trustworthiness of the
              signing key to the namespace.  Such an assertion is beyond the scope of this
              document, though one may use traditional PKI methods,
              a trusted key resolution service, or methods like [schematized trust].
            </t>
            <t>It MAY cache the content object for future use, up to the ExpiryTime
              if present.
            </t>
            <t>A consumer MAY accept a content object off the wire that is expired.
              It may happen that a packet expires while in flight, and there is no requirement
              that forwarders drop expired packets in flight.  The only requirement is that
              content stores, caches, or producers MUST NOT respond with an expired content object.
            </t>
          </list>
        </t>
      </section>

      <section anchor="publisher" title="Publisher Behavior">
        <t> This document does not specify the method by which names populate a Forwarding
          Information Base (FIB) table at forwarders (see <xref target="forwarder"/>).
          A publisher is either configured with one or more name prefixes under which it may
          create content, or it chooses its name prefixes and informs the routing layer to advertise
          those prefixes.
        </t>
        <t>When a publisher receives an Interest, it SHOULD:
          <list style="symbols">
            <t>Verify that the Interest is part of the publishers namespace(s).
            </t>
            <t>If the Interest has a Validation section, verify the ValidationPayload.
              Usually an Interest will only have a CRC32C unless the publisher application
              specifically accommodates other validations.
              The publisher MAY choose to drop Interests that carry a Validation section if
              the publisher application does not expect those signatures as this could be
              a form of computational denial of service.  If the signature requires a key
              that the publisher does not have, it is NOT RECOMMENDED that the publisher fetch
              the key over the network, unless it is part of the application's expected behavior.
            </t>
            <t>Retrieve or generate the requested content object and return it to the
              Interest's previous hop.  If the requested content cannot be returned,
              the publisher SHOULD reply with an InterestReturn or a content object with
              application payload that says the content is not available; this content object
              should have a short ExpiryTime in the future.
            </t>
          </list>
        </t>
      </section>

      <section anchor="forwarder" title="Forwarder Behavior">
        <t>A forwarder routes Interest messages based on a Forwarding Information Base (FIB),
          returns Content Objects that match Interests to the Interest's previous hop, and
          processes InterestReturn control messages.  It may also keep a cache of Content Objects
          in the notional Content Store table.  This document does not specify the internal behavior
          of a forwarder -- only these and other external behaviors.
        </t>
        <t>In this document, we will use two processing pipelines, one for Interests
          and one for Content Objects.  Interest processing is made up of checking for
          duplicate Interests in the PIT (see <xref target="aggregation"/>), checking
            for a cached Content Object in the Content Store (see <xref target="contentstore"/>),
            and forwarding an Interest via the FIB.  Content Store processing is made up
            of checking for matching Interests in the PIT and forwarding to those previous hops.
        </t>
        <section anchor="hoplimit" title="Interest HopLimit">
          <t>Interest looping is not prevented in CCNx. An Interest traversing loops is eventually
            discarded using the hop-limit field of the Interest, which is decremented at each hop
            traversed by the Interest.
          </t>
          <t>Every Interest MUST carry a HopLimit.
          </t>
          <t>When an Interest is received from another forwarder, the HopLimit MUST
            be positive. A forwarder MUST decement the HopLimit of an Interest by
            at least 1 before it is forwarded.
          </t>
          <t>If the HopLimit equals 0, the Interest MUST NOT be forwarded to another forwarder;
            it MAY be sent to a publisher application or serviced from a local Content Store.
          </t>
        </section>

            <section anchor="aggregation" title="Interest Aggregation">
            <t>Interest aggregation is when a forwarder receives an Interest message that
              could be satisfied by another Interest message already forwarded by the node so the
              forwarder suppresses the new Interest; it only records the additional previous hop
              so a Content Object sent in response to the first Interest will satisfy both Interests.
          </t>
            <t>CCNx uses an interest aggregation rule that assumes the InterestLifetime is
               akin to a subscription time and is not a network round trip time.  Some previous
               aggregation rules assumed the lifetime was a round trip time, but this leads to
               problems of expiring an Interest before a response comes if the RTT is estimated
               too short or interfering with an ARQ scheme that wants to re-transmit an Interest
               but a prior interest over-estimated the RTT.
          </t>
            <t>A forwarder MAY implement an Interest aggregation scheme.  If it does not, then
               it will forward all Interest messages.  This does not imply that multiple,
               possibly identical, Content Objects will come back.  A forwarder MUST still
               satisfy all pending Interests, so one Content Object could satisfy multiple
               similar interests, even if the forwarded did not suppress duplicate Interest
               messages.
          </t>
            <t>A RECOMMENDED Interest aggregation scheme is:
            <list style="symbols">
            <t>Two Interests are considered 'similar' if they have the same Name, KeyIdRestr, and ObjHashRestr.
          </t>
            <t>Let the notional value InterestExpiry (a local value at the forwarder) be equal to
               the receive time plus the InterestLifetime (or a platform-dependent default value if not present).
          </t>
            <t>An Interest record (PIT entry) is considered invalid if its InterestExpiry time is in the past.
          </t>
            <t>The first reception of an Interest MUST be forwarded.
          </t>
            <t>A second or later reception of an Interest similar to a valid pending Interest
               from the same previous hop MUST be forwarded.  We consider these a retransmission requests.
          </t>
            <t>A second or later reception of an Interest similar to a valid pending Interest
            from a new previous hop MAY be aggregated (not forwarded).
          </t>
            <t>Aggregating an Interest MUST extend the InterestExpiry time of the Interest record.
               An implementation MAY keep a single InterestExpiry time for all previous hops
               or MAY keep the InterestExpiry time per previous hop.  In the first case, the forwarder
               might send a ContentObject down a path that is no longer waiting for it, in which case
               the previous hop (next hop of the Content Object) would drop it.
          </t>
          </list>
          </t>


        </section>

        <section anchor="contentstore" title="ContentStore Behavior">
          <t>The ContentStore is a special cache that sits on the fast path of a CCNx forwarder.
            It is an optional component.  It serves to repair lost packets and handle flash requests
            for popular content.  It could be pre-populated or use opportunistic caching.
            Because the Content Store could serve to amplify an attach via cache poisoning, there
            are special rules about how a Content Store behaves.
            <list style="numbers">
              <t>A forwarder MAY implement a ContentStore.  If it does, the Content Store
                matches a Content Object to an Interest via the normal matching rules (see <xref target="matching"/>).
              </t>
              <t>If an Interest has a KeyIdRestr, then the ContentStore MUST NOT reply unless it knows
                the signature on the matching ContentObject is correct.  It may do this by external knowledge
                (i.e., in a managed system pre-populating the cachine) or by having the public key and
                cryptographically verifying the signature.  If the public key is provided in the ContentObject
                itself (i.e., in the PublicKey field) or in the Interest, the ContentStore MUST verify that
                the public key's SHA-256 hash is equal to the KeyId and that it verifies the signature.
                A ContentStore MAY verify the digital signature of a Content Object before it is cached, but
                it is not required to do so.
                A ContentStore SHOULD NOT fetch keys over the network.  If it cannot or has not yet verified
                the signature, it should treat the Interest as a cache miss.
              </t>
              <t>If an Interest has an ObjHashRestr, then the ContentStore MUST NOT reply unless it
                knows the the matching ContentObject has the correct hash.  If it cannot verify the
                hash, then it should treat the Interest as a cache miss.
              </t>
              <t>It must object the Cache Control directives (see <xref target="cachecontrol"/>).
              </t>
            </list>
          </t>
        </section>

        <section anchor="interest_pipe" title="Interest Pipeline">
          <t>
            <list style="numbers">
              <t>Perform the HopLimit check (see <xref target="hoplimit"/>).
              </t>
              <t>Determine if the Interest can be aggregated, as per <xref target="aggregation"/>.  If
                it can be, aggregate and do not forward the Interest.
              </t>
              <t>If forwarding the Interest, check for a hit in the Content Store, as
                per <xref target="contentstore"/>.  If a matching
                Content Object is found, return it to the Interest's previous hop.  This
                injects the ContentStore as per <xref target="object_pipe"/>.
              </t>
              <t>Lookup the Interest in the FIB.  Longest prefix match (LPM) is performed
                name segment by name segment (not byte or bit).  It SHOULD exclude the
                Interest's previous hop.  If a match is found, forward the Interest.
                If no match is found or the forwarder choses to not forward due to
                a local condition (e.g., congestion), it SHOULD send an InterestReturn
                message, as per <xref target="InterestReturn"/>.</t>
            </list>
          </t>
        </section>

        <section anchor="object_pipe" title="Content Object Pipeline">
          <t>
            <list style="numbers">
              <t>It is RECOMMENDED that a forwarder that receives a content object
                check that the ContentObject came from an expected previous hop.  An
                expected previous hop is one pointed to by the FIB or one recorded in the
                PIT as having had a matching Interest sent that way.
              </t>
              <t>A Content Object MUST be matched to all pending Interests that
                satisfy the matching rules (see <xref target="matching"/>).  Each satisfied
                pending Interest MUST then be removed from the set of pending Interests.
              </t>
              <t>A forwarder SHOULD NOT send more then one copy of the received
                Content Object to the same Interest previous hop.  It may happen, for example,
                that two Interest ask for the same Content Object in different ways (e.g., by name
                and by name an KeyId) and that they both come from the same previous hop.
                It is normal to send
                the same content object multiple times on the same interface, such as Ethernet,
                if it is going to different previous hops.
              </t>
              <t>A Content Object SHOULD only be put in the Content Store if it satisfied
                an Interest (and passed rule #1 above).  This is to reduce the chances
                of cache poisoning.
              </t>
            </list>
          </t>
        </section>

      </section>
    </section>

    <section anchor="names" title="Names">
      <t>A CCNx name is a composition of name segments. Each name segment carries a label
        identifying the purpose of the name segment, and a value.  For example, some
        name segments are general names and some serve specific purposes, such as carrying
        version information or the sequencing of many chunks of a large object into smaller,
        signed Content Objects.</t>
      <t>There are three different types of names in CCNx: prefix, exact, and full names.
          A prefix name is simply a name that does not uniquely identify a single Content
          Object, but rather a namespace or prefix of an existing Content Object name.
          An exact name is one which uniquely identifies the name of a Content Object.
          A full name is one which is exact and is accompanied by an explicit or implicit ConObjHash.
          The ConObjHash is explicit in an Interest and implicit in a Content Object.</t>
      <t>The name segment labels specified in this document are given in the table below.
        Name Segment is a general name segment, typically occurring in the
        routable prefix and user-specified content name.  Other segment types are for
        functional name components that imply a specific purpose. </t>
      <t>A forwarding table entry may contain name segments of any type.
        Routing protocol policy and local system policy may limit what goes into
        forwarding entries, but there is no restriction at the core level.
        An Interest routing protocol, for example, may only allow binary name segments.
        A load balancer or compute cluster
        may route through additional component types, depending on their services.
      </t>
      <texttable anchor="name_types" title="CCNx Name Segment Types">
        <ttcol align="center">Name</ttcol>
        <ttcol align="left">Description</ttcol>
        <c>Name Segment</c>
        <c>A generic name segment that includes arbitrary octets.</c>
        <c>Interest Payload ID</c>
        <c>An octet string that identifies the payload carried in an Interest. As an example, the Payload ID might be a hash of the Interest Payload.
          This provides a way to differentiate between Interests based on the Payload solely through a Name Segment without having to include
          all the extra bytes of the payload itself. </c>
        <c>Application Components</c>
        <c>An application-specific payload in a name segment.  An application may apply
          its own semantics to these components.  A good practice is to identify the
          application in a Name segment prior to the application component segments.</c>
      </texttable>
      <t>At the lowest level, a Forwarder does not need to understand the semantics
        of name segments; it need only identify name segment boundaries and
        be able to compare two name segments (both label and value) for equality.  The Forwarder
        matches paths segment-by-segment against
        its forwarding table to determine a next hop.</t>
      <section anchor="NameExamples" title="Name Examples">
        <t>This section uses the <xref target="CCNxURI">CCNx URI</xref> representation of CCNx names .</t>
        <texttable anchor="name_examples" title="CCNx Name Examples">
          <ttcol align="center">Name</ttcol>
          <ttcol align="left">Description</ttcol>
          <c>ccnx:/</c>
          <c>A 0-length name, corresponds to a default route.</c>
          <c>ccnx:/NAME=</c>
          <c>A name with 1 segment of 0 length, distinct from ccnx:/.</c>
          <c>ccnx:/NAME=foo/APP:0=bar</c>
          <c>A 2-segment name, where the first segment is of type NAME and the second
            segment is of type APP:0.</c>
        </texttable>
      </section>

      <section anchor="ipid" title="Interest Payload ID">
        <t>An Interest may also have a Payload which carries state about the Interest but is not used to match
          a Content Object.
          If an Interest contains a payload, the Interest name should contain an Interest Payload ID (IPID).
          The IPID allows a PIT table entry to correctly multiplex Content Objects in response to a specific Interest with
          a specific payload ID.  The IPID could be derived from a hash of the payload or could be a GUID or a nonce.
          An optional Metadata field defines the IPID field so other systems could verify the IPID, such as when it is
          derived from a hash of the payload.  No system is required to verify the IPID.
        </t>
      </section>

    </section>

    <section anchor="cachecontrol" title="Cache Control">
      <t>CCNx supports two fields that affect cache control.  These determine how a
        cache or Content Store handles a Content Object.  They are not used in the fast path,
        but only to determine if a ContentObject can be injected on to the fast path in response
        to an Interest.
      </t>
      <t>The ExpiryTime is a field that exists within the signature envelope of a Validation Algorithm.
        It is the UTC time in milliseconds after which the ContentObject is considered expired and MUST
        no longer be used to respond to an Interest from a cache. Stale content MAY be flushed from the cache.
      </t>
      <t>The Recommended Cache Time (RCT) is a field that exists outside the signature envelope.
        It is the UTC time in milliseconds after which the publisher considers the Content Object to be
        of low value to cache.  A cache SHOULD discard it after the RCT, though it MAY keep it and still
        respond with it.  A cache is MAY discard the content object before the RCT time too; there is
        no contractual obligation to remember anything.
      </t>
      <t>This formulation allows a producer to create a Content Object with a long ExpiryTime
        but short RCT and keep re-publishing the same, signed, Content Object over and over again
        by extending the RCT.  This allows a form of "phone home" where the publisher wants to
        periodically see that the content is being used.
      </t>
      </section>

    <section anchor="ConObjHash" title="Content Object Hash">
        <t>CCNx allows an Interest to restrict a response to a specific hash.  The hash covers the Content Object
          message body and the validation sections, if present. Thus, if a Content Object is signed, its hash
          includes that signature value. The hash does not include the fixed or hop-by-hop headers of a
          Content Object. Because it is part of the matching rules (see <xref target="matching"/>),
          the hash is used at every hop.
        </t>
        <t>There are two options for matching the content object hash restriction in an Interest.
          First, a forwarder could compute for itself the hash value and compare it to the restriction.
          This is an expensive operation.  The second option is for a border device to compute the hash
          once and place the value in a header (ConObjHash) that is carried through the network.  The second
          option, of course, removes any security properties from matching the hash, so SHOULD only be
          used within a trusted domain.  The header SHOULD be removed when crossing a trust boundary.</t>
      </section>

    <section anchor="link" title="Link">
      <t>A Link is the tuple {Name, [KeyIdRestr], [ContentObjectHashRestr]}.  The information in a Link comprises the fields
        the fields of an Interest which would retrieve the Link target.
        A Content Object with PayloadType = "Link" is an object whose payload is one or more Links.
        This tuple may be used as a KeyLink to identify
        a specific object with the certificate wrapped key.

        It is RECOMMENDED to include at least one of KeyIdRestr or ContentObjectHashRestr.  If neither restriction
        is present, then any Content Object with a matching name from any publisher could be returned.
      </t>
    </section>
    <section anchor="hashes" title="Hashes">
      <t>Several protocol fields use cryptographic hash functions, which must be secure against attack
        and collisions.  Because these hash functions change over time, with better ones appearing
        and old ones falling victim to attacks, it is important that a CCNx protocol implementation support
        hash agility.</t>
      <t>In this document, we suggest certain hashes (e.g., SHA-256), but a specific
        implementation may use what it deems best. The normative <xref target="CCNMessages">CCNx Messages</xref>
        specification should be taken as the definition of acceptable hash functions and uses.
      </t>
    </section>

    <section anchor="signature" title="Validation">
      <section anchor="valalg" title="Validation Algorithm">
        <t>The Validator consists of a ValidationAlgorithm that specifies how to verify the message
          and a ValidationPayload containing the validation output, e.g., the digital signature or MAC. The ValidationAlgorithm
          section defines the type of algorithm to use and includes any necessary additional information.
          The validation is calculated from the beginning of the CCNx Message through the end of the
          ValidationAlgorithm section.  The ValidationPayload is the integrity value bytes, such
          as a MAC or signature.</t>
        <t>
          Some Validators contain a KeyId,
          identifying the publisher authenticating the Content Object. If an Interest carries
          a KeyIdRestriction, then that KeyIdRestriction MUST exactly match the Content Object's KeyId.</t>
        <t>
          Validation Algorithms fall into three categories: MICs, MACs, and Signatures.  Validators using MIC algorithms
          do not need to provide any additional information; they may be computed and verified
          based only on the algorithm (e.g., CRC32C). MAC validators require the use of a KeyId
          identifying the secret key used by the authenticator. Because MACs are usually used between two parties that
          have already exchanged secret keys via a key exchange protocol, the KeyId may be any agreed-upon value to
          identify which key is used.  Signature
          validators use public key cryptographic algorithms such as RSA, DSA, ECDSA. The KeyId field in the
          ValidationAlgorithm identifies the public key used to verify the signature. A signature may optionally
          include a KeyLocator, as described above, to bundle a Key or Certificate or KeyLink.  MAC and Signature
          validators may also include a SignatureTime, as described above.
        </t>
        <t>A PublicKeyLocator KeyLink points to a Content Object with a DER-encoded X509 certificate
          in the payload.  In this case, the target KeyId must equal the first object's KeyId.
          The target KeyLocator must include the public key corresponding to the KeyId.
          That key must validate the target Signature.
          The payload is an X.509 certificate whose public key must match the target
          KeyLocator's key.  It must be issued by a trusted authority, preferably specifying
          the valid namespace of the key in the distinguished name.
        </t>
      </section>
    </section>
    <section anchor="matching" title="Interest to Content Object matching">
      <t>A Content Object satisfies an Interest if and only if (a) the Content Object name, if present,
        exactly matches the Interest name, and (b) the ValidationAlgorithm KeyId of the Content Object
        exactly equals the Interest KeyIdRestriction, if present, and (c) the computed ContentObjectHash exactly equals the Interest
        ContentObjectHashRestriction, if present.</t>
      <t>The matching rules are given by this predicate, which if it evaluates true means
        the ContentObject matches the Interest.
        Ni = Name in Interest (may not be empty), Ki = KeyIdRestriction
        in the interest (may be empty), Hi = ContentObjectHashRestriction in Interest (may be empty).
        Likewise, No, Ko, Ho are those properties in the ContentObject, where No and Ko may be empty;
        Ho always exists.
        For binary relations, we use &amp; for AND and | for OR.  We use E for the EXISTS (not empty)
        operator and ! for the NOT EXISTS operator.</t>
      <t>As a special case, if the ContentObjectHashRestriction in the Interest specifies an
        unsupported hash algorithm, then no ContentObject can match the Interest so the
        system should drop the Interest and MAY send an InterestReturn to the previous hop.
        In this case, the predicate below will never get executed because the Interest is
        never forwarded.  If the system is using the optional behavior of having a different system
        calculate the hash for it, then the system may assume all hash functions are
        supported and leave it to the other system to accept or reject the Interest.</t>
      <figure>
        <artwork align="left"><![CDATA[
(!No | (Ni=No)) & (!Ki | (Ki=Ko)) & (!Hi | (Hi=Ho)) & (E No | E Hi)
]]></artwork>
      </figure>
      <t>As one can see, there are two types of attributes one can match.  The first term
        depends on the existence of the attribute in the ContentObject while the next two terms
        depend on the existence of the attribute in the Interest.  The last term
        is the "Nameless Object" restriction which states that if a Content Object does not have a Name, then
        it must match the Interest on at least the Hash restriction.</t>
      <t>If a Content Object does not carry the ContentObjectHash
        as an expressed field, it must be calculated in network to match against. It is
        sufficient within an autonomous system to calculate a ContentObjectHash
        at a border router and carry it via trusted means within the autonomous
        system. If a Content Object ValidationAlgorithm does not have a KeyId then
        the Content Object cannot match an Interest with a KeyIdRestriction.</t>
    </section>

    <section anchor="InterestReturn" title="Interest Return">
      <t>This section describes the process whereby a network element may return an Interest message
        to a previous hop if there is an error processing the Interest. The returned Interest may be
        further processed at the previous hop or returned towards the Interest origin.
        When a node returns an Interest it indicates that the previous hop should not expect a response
        from that node for the Interest -- i.e., there is no PIT entry left at the returning node.</t>
      <t>The returned message maintains compatibility with the existing TLV packet format
        (a fixed header, optional hop-by-hop headers, and the CCNx message body). The returned Interest
        packet is modified in only two ways:
        <list style="symbols">
          <t>The PacketType is set to InterestReturn to indicate a Feedback message.
          </t>
          <t>The ReturnCode is set to the appropriate value to signal the reason for the return
          </t>
        </list>
      </t>
      <t>The specific encodings of the Interest Return are specified in <xref target="CCNMessages"/>.</t>
      <t>A Forwarder is not required to send any Interest Return messages.</t>
      <t>A Forwarder is not required to process any received Interest Return message.
        If a Forwarder does not process Interest Return messages, it SHOULD silently drop them.</t>
      <t>The Interest Return message does not apply to a Content Object or any other message type.</t>
      <t>An Interest Return message is a 1-hop message between peers.  It is not propagated
        multiple hops via the FIB.  An intermediate node that receives an InterestReturn may
        take corrective actions or may propagate its own InterestReturn to previous hops
        as indicated in the reverse path of a PIT entry.</t>
      <section anchor="MessageFormat" title="Message Format">
        <t>The Interest Return message looks exactly like the original Interest message with the
          exception of the two modifications mentioned above.
          The PacketType is set to indicate the message is an InterestReturn and the reserved
          byte in the Interest header is used as a Return Code.  The numeric values for the PacketType
          and ReturnCodes are in <xref target="CCNMessages"/>.</t>
      </section>
      <section anchor="TypeDefinitions" title="ReturnCode Types">
        <t>This section defines the InterestReturn ReturnCode introduced in this RFC.
          The numeric values used in the packet are defined in <xref target="CCNMessages"/>.</t>
        <texttable anchor="ReasonCode" title="Interest Return Reason Codes">
          <ttcol align="left">Name</ttcol>
          <ttcol align="left">Description</ttcol>
          <c>
            <xref target="NoRoute">No Route</xref>
          </c>
          <c>The returning Forwarder has no route to the Interest name.</c>
          <c>
            <xref target="HopLimit">HopLimit Exceeded</xref>
          </c>
          <c>The HopLimit has decremented to 0 and need to forward the packet.</c>
          <c>
            <xref target="MTU">Interest MTU too large</xref>
          </c>
          <c>The Interest's MTU does not conform to the required minimum and would require fragmentation.</c>
          <c>
            <xref target="NoResources">No Resources</xref>
          </c>
          <c>The node does not have the resources to process the Interest.</c>
          <c>
            <xref target="PathError">Path error</xref>
          </c>
          <c>There was a transmission error when forwarding the Interest along a route (a transient error).</c>
          <c>
            <xref target="Prohibited">Prohibited</xref>
          </c>
          <c>An administrative setting prohibits processing this Interest.</c>
          <c>
            <xref target="Congestion">Congestion</xref>
          </c>
          <c>The Interest was dropped due to congestion (a transient error).</c>
          <c>
            <xref target="UnsupportedHashAlgorithm">Unsupported Content Object Hash Algorithm</xref>
          </c>
          <c>The Interest was dropped because it requested a Content Object Hash Restriction using
            a hash algorithm that cannot be computed.</c>
          <c>
            <xref target="MalformedInterest">Malformed Interest</xref>
          </c>
          <c>The Interest was dropped because it did not correctly parse.</c>
        </texttable>
      </section>
      <section anchor="InterestReturnProtocol" title="Interest Return Protocol">
        <t>This section describes the Forwarder behavior for the various Reason codes for Interest Return.
          A Forwarder is not required to generate any of the codes, but if it does, it MUST conform to
          this specification.</t>
        <t>If a Forwarder receives an Interest Return, it SHOULD take these standard corrective actions.
          A forwarder is allowed to ignore Interest Return messages, in which case its PIT entry would
          go through normal timeout processes.

          <list style="symbols"><t>Verify that the Interest Return came from a next-hop to which it actually sent the Interest.</t><t>If a PIT entry for the corresponding Interest does not exist, the Forwarder should ignore the Interest Return.</t><t>If a PIT entry for the corresponding Interest does exist, the Forwarder MAY do one of the following:
              <list style="symbols"><t>Try a different forwarding path, if one exists, and discard the Interest Return, or</t><t>Clear the PIT state and send an Interest Return along the reverse path.</t></list>
            </t></list>
        </t>
        <t>If a forwarder tries alternate routes, it MUST ensure that it does not use
          same same path multiple times.  For example, it could keep track of which next hops it has
          tried and not re-use them.</t>
        <t>If a forwarder tries an alternate route, it may receive a second InterestReturn, possibly of
          a different type than the first InterestReturn.  For example, node A sends an Interest to node B,
          which sends a No Route return.  Node A then tries node C, which sends a Prohibited.  Node A
          should choose what it thinks is the appropriate code to send back to its previous hop</t>
        <t>If a forwarder tries an alternate route, it should decrement the Interest Lifetime to account
          for the time spent thus far processing the Interest.</t>
        <section anchor="NoRoute" title="No Route">
          <t>If a Forwarder receives an Interest for which it has no route, or for which the only route is
            back towards the system that sent the Interest, the Forwarder SHOULD generate a "No Route"
            Interest Return message.</t>
          <t>  How a forwarder manages the FIB table
            when it receives a No Route message is implementation dependent.
            In general, receiving a No Route Interest Return should not cause a forwarder to remove
            a route.  The dynamic routing protocol that installed the route should correct the route or
            the administrator who created a static route should correct the configuration.  A forwarder could
            suppress using that next hop for some period of time.</t>
        </section>
        <section anchor="HopLimit" title="HopLimit Exceeded">
          <t>A Forwarder MAY choose to send HopLimit Exceeded messages when it receives an Interest that must
            be forwarded off system and the HopLimit is 0.</t>
        </section>
        <section anchor="MTU" title="Interest MTU Too Large">
          <t>If a Forwarder receives an Interest whose MTU exceeds the prescribed minimum, it MAY send
            an "Interest MTU Too Large" message, or it may silently discard the Interest.</t>
          <t>If a Forwarder receives an "Interest MTU Too Large" is SHOULD NOT try alternate paths.
            It SHOULD propagate the Interest Return to its previous hops.</t>
        </section>
        <section anchor="NoResources" title="No Resources">
          <t>If a Forwarder receives an Interest and it cannot process the Interest due to lack of resources,
            it MAY send an InterestReturn.  A lack of resources could be the PIT table is too large, or some other
            capacity limit.</t>
        </section>
        <section anchor="PathError" title="Path Error">
          <t>If a forwarder detects an error forwarding an Interest, such as over a reliable link, it MAY send
            a Path Error Interest Return indicating that it was not able to send or repair a forwarding error.</t>
        </section>
        <section anchor="Prohibited" title="Prohibited">
          <t>A forwarder may have administrative policies, such as access control lists, that prohibit receiving or
            forwarding an Interest.  If a forwarder discards an Interest due to a policy, it MAY send a Prohibited
            InterestReturn to the previous hop. For example, if there is an ACL that says /parc/private can only come from
            interface e0, but the Forwarder receives one from e1, the Forwarder must have a way to return the Interest with an explanation.</t>
        </section>
        <section anchor="Congestion" title="Congestion">
          <t>If a forwarder discards an Interest due to congestion, it MAY send a Congestion InterestReturn to
            the previous hop.</t>
        </section>
        <section anchor="UnsupportedHashAlgorithm" title="Unsupported Content Object Hash Algorithm">
          <t>If a Content Object Hash Restriction specifies a hash algorithm the forwarder cannot verify,
            the Interest should not be accepted and the forwarder MAY send an InterestReturn to the previous hop.</t>
        </section>
        <section anchor="MalformedInterest" title="Malformed Interest">
          <t>If a forwarder detects a structural or syntactical error in an Interest, it SHOULD drop
            the interest and MAY send an InterestReturn to the previous hop.  This does not imply that any
            router must validate the entire structure of an Interest.</t>
        </section>
      </section>
    </section>
    <section anchor="Acknowledgements" title="Acknowledgements"> </section>
    <!-- Possibly a 'Contributors' section ... -->
    <section anchor="IANA" title="IANA Considerations">
      <t>This memo includes no request to IANA. </t>

      <t>TO_INTERESTLIFETIME = 2 seconds.</t>
    </section>
    <section anchor="Security" title="Security Considerations">
      <t>The Interest Return message has no authenticator from the previous hop.  Therefore, the payload of the Interest Return
        should only be used locally to match an Interest.  A node should never forward that Interest payload as an Interest.
        It should also verify that it sent the Interest in the Interest Return to that node and not allow anyone to negate
        Interest messages.</t>
      <t>Caching nodes must take caution when processing content objects. Verifying
          digital signatures requires a public key operation in the data plane.
          This can be abused as a denial-of-service vector against caching nodes.
          Therefore, it is recommended that caching routers only cache Content Objects
          which can be verified by an Interest ContentObjectHashRestriction.</t>
      <t>If two adjacent peers require authenticated messaging, they must use an external mechanism such as MACSEC.</t>
    </section>
  </middle>
  <!--  *****BACK MATTER ***** -->
  <back>
    <!-- References split into informative and normative -->
    <!-- There are 2 ways to insert reference entries from the citation libraries:
         1. define an ENTITY at the top, and use "ampersand character"RFC2629; here (as shown)
         2. simply use a PI "less than character"?rfc include="reference.RFC.2119.xml"?> here
         (for I-Ds: include="reference.I-D.narten-iana-considerations-rfc2434bis.xml")

         Both are cited textually in the same manner: by using xref elements.
         If you use the PI option, xml2rfc will, by default, try to find included files in the same
         directory as the including file. You can also define the XML_LIBRARY environment variable
         with a value containing a set of directories to search.  These can be either in the local
         filing system or remote ones accessed by http (http://domain/dir/... ).-->
    <references title="Normative References">
      <!--?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml"?-->
      &RFC2119;
    </references>
    <references title="Informative References">
      <!-- Here we use entities that we defined at the beginning. -->
      &RFC3986;
      &RFC3552;
      &RFC5234;
      <!-- A reference written by by an organization not a person. -->

      <reference anchor="CCN" target="http://www.CCNx.org"><front><title>CCNx Open Source</title><author><organization>PARC, Inc.</organization></author><date year="2007"/></front></reference>

      <reference anchor="CCNMessages" target="http://tools.ietf.org/html/draft-irtf-icnrg-ccnxmessages-01"><front><title>CCNx Messages in TLV Format (Internet draft)</title><author initials="M." surname="Mosko" fullname="Marc Mosko"><organization>PARC, Inc.</organization></author><author initials="I." surname="Solis" fullname="Ignacio Solis"><organization>PARC, Inc.</organization></author><date year="2016"/></front></reference>

      <reference anchor="CCNxURI" target="http://tools.ietf.org/html/draft-mosko-icnrg-ccnxuri-03"><front><title>The CCNx URI Scheme (Internet draft)</title><author initials="M." surname="Mosko" fullname="Marc Mosko"><organization>PARC, Inc.</organization></author><author initials="C." surname="Wood" fullname="Christopher A. Wood"><organization>PARC, Inc.</organization></author><date year="2016"/></front></reference>


    </references>


  </back>
</rfc>
