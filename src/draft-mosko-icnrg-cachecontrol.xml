<?xml version="1.0" encoding="US-ASCII"?>
<!-- This template is for creating an Internet Draft using xml2rfc,
    which is available here: http://xml.resource.org. -->
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!-- One method to get references from the online citation libraries.
    There has to be one entity for each item to be referenced.
    An alternate method (rfc include) is described in the references. -->

<!ENTITY RFC2119 SYSTEM "bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2629 SYSTEM "bibxml/reference.RFC.2629.xml">
<!ENTITY RFC3552 SYSTEM "bibxml/reference.RFC.3552.xml">
<!ENTITY RFC5226 SYSTEM "bibxml/reference.RFC.5226.xml">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs),
    please see http://xml.resource.org/authoring/README.html. -->
<!-- Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.
    (Here they are set differently than their defaults in xml2rfc v1.32) -->
<?rfc strict="yes" ?>
<!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC) -->
<?rfc toc="yes"?>
<!-- generate a ToC -->
<?rfc tocdepth="4"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references -->
<?rfc symrefs="yes"?>
<!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes" ?>
<!-- sort the reference entries alphabetically -->
<!-- control vertical white space
    (using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="no" ?>
<!-- do not start each main section on a new page -->
<?rfc subcompact="no" ?>
<!-- keep one blank line between list items -->
<!-- end of list of popular I-D processing instructions -->

<?rfc private="" ?>

<rfc category="exp" docName="draft-mosko-icnrg-cachecontrol-latest" ipr="trust200902">
  <!-- category values: std, bcp, info, exp, and historic
    ipr values: trust200902, noModificationTrust200902, noDerivativesTrust200902,
       or pre5378Trust200902
    you can add the attributes updates="NNNN" and obsoletes="NNNN"
    they will automatically be output with "(if approved)" -->

  <!-- ***** FRONT MATTER ***** -->

  <front>
    <!-- The abbreviated title is used in the page header - it is only necessary if the
        full title is longer than 39 characters -->

    <title abbrev="CCNx Cache Control">CCNx Cache Control</title>

    <!-- add 'role="editor"' below for the editors if appropriate -->

    <!-- Another author who claims to be an editor -->

    <author fullname="Marc Mosko" initials="M.E." surname="Mosko">
      <organization>PARC, Inc.</organization>

      <address>
       <postal>
         <street/>

         <!-- Reorder these if your country does things differently -->

         <city>Palo Alto</city>

         <region>California</region>

         <code>94304</code>

         <country>USA</country>
       </postal>

       <phone>+01 650-812-4405</phone>

       <email>marc.mosko@parc.com</email>

       <!-- uri and facsimile elements may also be added -->
     </address>
    </author>

    <date month="February" year="2016"/>

    <!-- If the month and year are both specified and are the current ones, xml2rfc will fill
        in the current day for you. If only the current year is specified, xml2rfc will fill
	 in the current day and month for you. If the year is not the current one, it is
	 necessary to specify at least a month (xml2rfc assumes day="1" if not specified for the
	 purpose of calculating the expiry date).  With drafts it is normally sufficient to
	 specify just the year. -->

    <!-- Meta-data Declarations -->

    <area>General</area>

    <workgroup>ICNRG</workgroup>

    <!-- WG name at the upperleft corner of the doc,
        IETF is fine for individual submissions.
	 If this element is not present, the default is "Network Working Group",
        which is used by the RFC Editor as a nod to the history of the IETF. -->

    <keyword>Content Centric Networking</keyword>

    <!-- Keywords will be incorporated into HTML output
        files in a meta tag but they have no effect on text or nroff
        output. If you submit your draft to the RFC Editor, the
        keywords will be used for the search engine. -->

    <abstract>
      <t>This document proposed a modification of the CCNx 1.0 cache control
      directives to allow use of either absolute times or relative times by
      the publisher.  Intermediate caches do not require synchronized clocks
      even if the publisher uses an absolute time.  This document updates
      the definition of the RecommendedCacheTime but leaves the ExpiryTime
      as previously defined.</t>
    </abstract>
  </front>

  <middle>
     <section title="Introduction">
       <t>The current CCNx 1.0 specification <xref target="CCNSemantics"></xref> defines two cache
       control directives: RecommendedCacheTime and ExpiryTime.  Both use absolute times and thus
       require caches have synchronized time.  We propose an extension to CCNx that allows the use
       of relative times and the processing of ExpiryTime without synchronized time between caches.
       </t>

       <t>This draft does not change the semantics of ExpiryTime and RecommendedCacheTime (RCT).  ExpiryTime is
       the maximum time during which a cache can respond with a ContentObject.  RCT is the maximum time during which
       a cache should keep a ContentObject, though any cache may discard early or may choose to keep longer such as if
       it is popular.  We introduce new MaxAge and Age fields for use in relative time expiry calculations.</t>

       <t>This proposal is somewhat based on the HTTP/1.1 age system, but not exactly the same due
         to the definitions of our existing ExpiryTime and RecommendedCacheTime (RCT) fields.  It also
         has different semantics because HTTP allows for stale and fresh, while in CCNx we have either
         alive or dead (expired).
       </t>

       <t>To use relative times for cache control requires and Age field in the unsigned packet headers.
         The Age field is incremented by a cache when it serves a ContentObject based on its residency time in the cache.
         Combining a MaxAge field from the signed portion of the ContentObject with the Age field allows one to determine
         if the ContentObject is expired or not.  If Age >= MaxAge, then the ContentObject is expired.</t>

       <t>We can use a single Age field for ContentObjects with either MaxAge or ExpiryTime (it would not have both).
         If using MaxAge, then Age is a relative time with a base of 0.  If using ExpiryTime, then Age is initialized
         to the current synchronized time by the publisher and intermediate caches increment it from there.</t>

       <t>Because the Age field is outside the signature envelope, one cannot rely on it for trusted protocol operation.
         Not having it, however, results in worse side effects than relying on the unauthenticated Age field.
         If all nodes are operating correctly, we can make a correct and live protocol using the rule that only the publisher
         is allowed to decrement the age field and intermediate caches cannot decrement it.  This is not true of only having a
         MaxAge field without an Age field, as a ContentObject could travel in a cycle and live for longer than MaxAge.</t>

       <t>We do not consider allowing an Interest to have a min-age directive.</t>

      <section title="Requirements Language">
        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD
          NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as
          described in <xref target="RFC2119">RFC 2119</xref>.</t>
      </section>
    </section>

    <section anchor="protocol" title="Protocol Description">

      <t>All of these headers only control when a cache and respond with a ContentObject.  They do not affect the data plane.
        <list style="symbols">
          <t>ContentObject.ExpiryTime: absolute time</t>
          <t>ContentObject.MaxAge: relative seconds</t>
          <t>PerhopHeaders.RCT: absolute time</t>
          <t>PerhopHeaders.Age: relative milli-seconds</t>
        </list>
      </t>

      <t>We consider time in flight to be negligible compared to time in storage or the second resolution of MaxAge and Age.
      If a cache has reason to believe there is a large time in flight before a ContentObject was received from the previous hop,
      it should take that time into consideration of its residency time at the cache.  For example, a space system might know that
      a certain communication takes 4 minutes or a satellite system might know that one hop takes 300 msec.</t>

      <t>The RCT is re-defined to now always be relative to the Age.  Once the Age exceeds the RCT, a node SHOULD stop serving
        it from cache, but is not required to stop.</t>

      <section anchor="publisher" title="Publisher">
        <t>If it does not have synchronized time, it MUST NOT use ExpiryTime.  It MAY use MaxAge.</t>

        <t>A publisher MUST NOT use both ExpiryTime and MaxAge.</t>

        <t>When first creating a Content Object:
          <list style="symbols">
            <t>If using ExpiryTime, the publisher MUST add an Age header and set it to the current synchronized time.</t>
            <t>If using MaxAge, the publisher MUST add an Age header and set it to 0.</t>
            <t>The RCT field, if used, is always taken as a delta from the Age field.</t>
            <t>If using RCT and neither of ExpiryTime or MaxAge, the publisher MUST add an Age field with the desired delta before
            the RCT.  It SHOULD use a base 0 for the Age, but MAY use any desired base.</t>
          </list>
        </t>

      <t>If answering an Interest for a ContentObject that was already created:
        <list style="symbols">
          <t>It MAY use the above procedure, which essentially refreshes the ContentObject.</t>
          <t>It MAY account for the elapsed time by using the current synchronized time or relative Age, as appropriate.</t>
        </list>
      </t>

        <t>The ContentStore on the publisher node operates as normal for any ContentStore.</t>
      </section>

      <section anchor="cache" title="Content Store">

        <t>In these calculations, we will assume a missing field has the value of 0.  For example, a ContentObject with an
          ExpiryTime has an implicit MaxAge of 0.  Remember that Age is in milli-seconds and MaxAge is in seconds, so one
          should re-scale MaxAge when comparing it to Age.</t>

        <t>The residency_time is the rounded-up time in milli-seconds that a ContentObject has resided in the cache.  The
        minimum value is 1.  This ensures that the Age is always increasing as it is stored and served from a set of caches.</t>

        <figure>
          <artwork align="left">
age_value = Age + residency_time
remaining_age = max(MaxAge - age_value, 0)
remaining_expiry = max(ExpiryTime - now, 0)
          </artwork>
        </figure>


        <t>At most one of remaining_age and remaining_expiry will be positive.  Both could be 0.</t>

        <figure>
          <artwork align="left">
remaining_life = max(remaining_age, remaining_expiry)
          </artwork>
        </figure>

        <t>If remaining_life &gt; 0, then the ContentObject may be used from cache.  Otherwise, it should be considered a cache miss.</t>

        <t>This rule ensures that the Age field never decreases at an intermediate cache and will try to catch up to synchronized
          time whenever possible.  When responding with a ContentObject from cache, a node MUST:
          <list style="symbols">
            <t>If it has synchronized time and ExpiryTime in packet, set the Age field to max(now, Age)</t>
            <t>Otherwise, set the Age field to (Age + residency_time)</t>
          </list>
        </t>

        <t>If the ContentStore receives the same ContentObject but with a younger Age, it should reset its Age to the new value.
        This allows the publisher to re-issue the same ContentObject with a new validity period without re-signing and creating
        a new ContentObject.  Because the protocol maintains the invariant that only the publisher can decrement the Age,
        the protocol should not induce permanent cycles of ContentObjects bouncing between caches.</t>
      </section>

      <section anchor="consumer" title="Consumer">
        <t>If the consumer has synchronized time and the ContentObject has an ExpiryTime, it MAY perform a validation on the
          ContentObject to determine if it is out of date.  Otherwise, it MAY consider the Age field relative to the
          MaxAge or ExpiryTime.  It is possible for a ContentObject to expire while in flight, so a Consumer usually should not
          penalize recently expired objects, though this behavior is application dependent.
        </t>
      </section>

      <section anchor="combinations" title="Allowed Combinations">
        <t>None of these combinations require synchronized clocks at any node and all allow a mixture of synchronized and
        unsynchronized clocks.</t>

        <t>No cache is required to keep a ContentObject for any amount of time.  No cache is required to discard a ContentObject
        after the RCT, though it should unless it is popular.  All caches must cease to respond with a ContentObject that
        has expired, based either on Age to MaxAge or Age to ExpiryTime comparison or based on comparing a synchronized clock
        to the ExpiryTime.  Comparing a synchronized clock to ExpiryTime always takes precedence over the Age field to determine
        expiry.</t>

        <t>
          <list style="numbers">
            <t>RCT and Age only: The RCT functions relative to Age.
              The ContentObject never expires (dies) and could live in cache forever.
              However, nodes would normally discard it once RCT &lt;= Age.</t>

            <t>Age and ExpiryTime:  Initialize the Age to the current synchronized time.
              Intermediate caches may serve it so long as Age &lt; ExpiryTime.
            </t>

            <t>Age and MaxAge: Initialize Age to 0.  Intermediate caches may serve it so long as
              Age &lt; MaxAge.</t>

            <t>Age and ExpiryTime and RCT: As #2, except may discard once RCT &lt;= Age</t>

            <t>Age and MaxAge and RCT: As #3, except may discard once RCT &lt;= Age.</t>
          </list>
        </t>

        <t>To prevent a ContentObject from being served from cache, a producer should set the ExpiryTime to 0.</t>
      </section>
    </section>

    <!-- Possibly a 'Contributors' section ... -->

    <section anchor="IANA" title="IANA Considerations">
      <t>This memo includes no request to IANA.  TODO: If this document is submitted as an official
        draft, this section must be updated to reflect the IANA registries described in <xref target="CCNMessages"></xref>
      </t>
    </section>

    <section anchor="Security" title="Security Considerations">
      <t>Because the Age field is outside the security envelope, a system relying on only relative times (MaxAge)
        could be susceptible to intermediate nodes decreasing the Age and a ContentObject living beyond the
        desired MaxAge.  If this is highly sensitive, then a consumer and producer could use synchronized clocks
        and ExpiryTime.
      </t>
    </section>
  </middle>

  <!--  *****BACK MATTER ***** -->

  <back>
    <!-- References split into informative and normative -->

    <!-- There are 2 ways to insert reference entries from the citation libraries:
    1. define an ENTITY at the top, and use "ampersand character"RFC2629; here (as shown)
    2. simply use a PI "less than character"?rfc include="reference.RFC.2119.xml"?> here
       (for I-Ds: include="reference.I-D.narten-iana-considerations-rfc2434bis.xml")

    Both are cited textually in the same manner: by using xref elements.
    If you use the PI option, xml2rfc will, by default, try to find included files in the same
    directory as the including file. You can also define the XML_LIBRARY environment variable
    with a value containing a set of directories to search.  These can be either in the local
    filing system or remote ones accessed by http (http://domain/dir/... ).-->

    <references title="Normative References">
      <!--?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml"?-->
      &RFC2119; </references>

    <references title="Informative References">
      <!-- Here we use entities that we defined at the beginning. --> &RFC3552; &RFC5226;
      <!-- A reference written by by an organization not a person. -->

      <reference anchor="CCNx" target="http://www.ccnx.org">
        <front>
          <title>CCNx Open Source</title>

          <author>
            <organization>PARC, Inc.</organization>
          </author>

          <date year="2007"/>
        </front>
      </reference>


      <reference anchor="CCNSemantics" target="http://tools.ietf.org/html/draft-mosko-icnrg-ccnxsemantics-03">
        <front>
          <title>CCNx Semantics (Internet draft)</title>

          <author initials='M.' surname='Mosko' fullname='Marc Mosko'>
            <organization>PARC, Inc.</organization>
          </author>
          <author initials='I.' surname='Solis' fullname='Ignacio Solis'>
          </author>
          <author initials='C.' surname='Wood' fullname='Christopher Wood'>
            <organization>PARC, Inc.</organization>
          </author>

          <date year="2016"/>
        </front>
      </reference>

      <reference anchor="CCNMessages" target="http://tools.ietf.org/html/draft-irtf-icnrg-ccnxmessages-03">
        <front>
          <title>CCNx Messages in TLV Format (Internet draft)</title>
          <author initials="M." surname="Mosko" fullname="Marc Mosko"><organization>PARC, Inc.</organization></author>
          <author initials="I." surname="Solis" fullname="Ignacio Solis"></author>
          <author initials='C.' surname='Wood' fullname='Christopher Wood'><organization>PARC, Inc.</organization>
          </author>
          <date year="2016"/>
        </front>
      </reference>

    </references>

  </back>
</rfc>
