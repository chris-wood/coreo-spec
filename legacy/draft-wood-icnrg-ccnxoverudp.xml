<?xml version="1.0" encoding="US-ASCII"?>
<!-- This template is for creating an Internet Draft using xml2rfc,
    which is available here: http://xml.resource.org. -->
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!-- One method to get references from the online citation libraries.
    There has to be one entity for each item to be referenced.
    An alternate method (rfc include) is described in the references. -->

<!ENTITY RFC2119 SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2629 SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2629.xml">
<!ENTITY RFC3552 SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.3552.xml">
<!ENTITY RFC5226 SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.5226.xml">
<!ENTITY RFC5234 SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.5234.xml">

]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs),
    please see http://xml.resource.org/authoring/README.html. -->
<!-- Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.
    (Here they are set differently than their defaults in xml2rfc v1.32) -->
<?rfc strict="yes" ?>
<!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC) -->
<?rfc toc="yes"?>
<!-- generate a ToC -->
<?rfc tocdepth="4"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references -->
<?rfc symrefs="yes"?>
<!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes" ?>
<!-- sort the reference entries alphabetically -->
<!-- control vertical white space
    (using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="no" ?>
<!-- do not start each main section on a new page -->
<?rfc subcompact="no" ?>
<!-- keep one blank line between list items -->
<!-- end of list of popular I-D processing instructions -->

<?rfc private="" ?>

<rfc category="exp" docName="draft-wood-icnrg-ccnxoverudp-00" ipr="trust200902">
  <!-- category values: std, bcp, info, exp, and historic
    ipr values: trust200902, noModificationTrust200902, noDerivativesTrust200902,
       or pre5378Trust200902
    you can add the attributes updates="NNNN" and obsoletes="NNNN"
    they will automatically be output with "(if approved)" -->

  <!-- ***** FRONT MATTER ***** -->

  <front>
    <!-- The abbreviated title is used in the page header - it is only necessary if the
        full title is longer than 39 characters -->

    <title abbrev="CCNx over UDP">CCNx over UDP</title>

    <!-- add 'role="editor"' below for the editors if appropriate -->

    <!-- Another author who claims to be an editor -->

    <author fullname="Marc Mosko" initials="M.E." surname="Mosko">
      <organization>PARC, Inc.</organization>

      <address>
       <postal>
         <street/>

         <city>Palo Alto</city>

         <region>California</region>

         <code>94304</code>

         <country>USA</country>
       </postal>

       <phone>+01 650-812-4405</phone>

       <email>marc.mosko@parc.com</email>

       <!-- uri and facsimile elements may also be added -->
     </address>
    </author>

    <author fullname="Ignacio Solis" initials="I.S." surname="Solis">
      <organization>PARC, Inc.</organization>

      <address>
       <postal>
         <street/>

         <city>Palo Alto</city>

         <region>California</region>

         <code>94304</code>

         <country>USA</country>
       </postal>

       <phone>+01 650-812-ZZZZ</phone>

       <email>ignacio.solis@parc.com</email>
     </address>
    </author>

    <author fullname="Christopher A. Wood" initials="C.A.W." surname="Wood">
      <organization>PARC, Inc.</organization>

      <address>
       <postal>
         <street/>

         <city>Palo Alto</city>

         <region>California</region>

         <code>94304</code>

         <country>USA</country>
       </postal>

       <phone>+01 XXX-YYY-ZZZZ</phone>

       <email>christopher.wood@parc.com</email>

       <!-- uri and facsimile elements may also be added -->
     </address>
    </author>

    <date year="2015"/>

    <!-- If the month and year are both specified and are the current ones, xml2rfc will fill
        in the current day for you. If only the current year is specified, xml2rfc will fill
	 in the current day and month for you. If the year is not the current one, it is
	 necessary to specify at least a month (xml2rfc assumes day="1" if not specified for the
	 purpose of calculating the expiry date). With drafts it is normally sufficient to
	 specify just the year. -->

    <!-- Meta-data Declarations -->

    <area>General</area>

    <workgroup>ICNRG</workgroup>

    <!-- WG name at the upperleft corner of the doc,
        IETF is fine for individual submissions.
	 If this element is not present, the default is "Network Working Group",
        which is used by the RFC Editor as a nod to the history of the IETF. -->

    <keyword>Content Centric Networking</keyword>

    <!-- Keywords will be incorporated into HTML output
        files in a meta tag but they have no effect on text or nroff
        output. If you submit your draft to the RFC Editor, the
        keywords will be used for the search engine. -->

    <abstract>
      <t>
        This document describes a preliminary set of information about how to
        run the CCNx protocol over UDP for interoperability between different
        systems and implementations.
      </t>

    </abstract>
  </front>

  <middle>
     <section title="Introduction">

<!-- NACHO: Something like CCNx can run over ethernet, but we will need to run over UDP in the meantime.
We need to agree how the UDP packets will look  -->
<!-- CAW: done. -->

      <t>
        CCNx is intended to run as a layer-2 protocol directly over ethernet.
        However, while hardware and software systems are developed to support
        this technology, it is necessary to support CCNx at higher layers
        in the network stack to perform experimentation, tests, and interoperability
        checks. Specifically, we need to run over layer-3 IP. Possible options include
        running directly over <xref target="UDP">UDP</xref> or <xref target="TCP">TCP</xref>.
      </t>

      <t>
        The intention of this document is to describe how to run the CCNx
        protocol over UDP. There are many ways this can be done, ranging from
        a trivial universal encapsulation approach to more complex
        configurations wherein UDP links require negotiation, maintenance,
        and security extensions. The design space is large, so we begin with
        simple techniques and leave more complex issues up for discussion.
      </t>

      <section title="Requirements Language">
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD
        NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as
        described in <xref target="RFC2119">RFC 2119</xref>.</t>
      </section>

    </section>

    <section title="Minimal Requirements for CCNx Over UDP">
      <t>
        To enable interoperability between CCNx implementations over UDP, one can
        create virtual links between endpoints to exchange CCNx messages (see below).
        The goal of this document is to prescribe exactly how to initialize, maintain,
        and teardown such links for the purpose of transmitting CCNx messages over
        <xref target="UDP">UDP</xref> instead of directly over layer-2 Ethernet.
      </t>

<!-- NACHO:
Section 2, describe a basic layout of a couple of forwarders connected to each other.
Let's describe the links as general links and then let's specify that this document is
about how to make those links exist, over UDP
-->
<!-- CAW: done. -->

      <figure>
        <artwork align="left"><![CDATA[
+----+  (Virtual link)   +----+
| H1 +-------------------+ H2 |
+----+                   +----+
        ]]></artwork>
      </figure>

      <t>
        These links are general, or virtual, in the sense that they connect any
        two CCN-compliant endpoints. Endpoints may be end-hosts, forwarders,
        routers, or any other network entity that needs to run the CCNx protocol.
        Therefore, these virtual links may traverse multiple IP routers, switches,
        and hubs between two endpoints (H1 and H2 in the example below, which
        are connected over multiple IP-compliant network elements).
      </t>

      <figure>
        <artwork align="left"><![CDATA[
                       +----+    +----+
                   +---> N2 +----+ N3 +-+
                   |   +----+    +----+ |
            +----+ |                    | +----+
+------+    |    +-+                    +-+    |    +----+   +------+
|  H1  +----+ N1 |                        | N5 +----+ N6 +---+  H2  |
+------+    |    +---+              +-----+    |    +----+   +------+
            +----+   |    +----+    |     +----+
                     +----+ N4 +----+
                          +----+

        ]]></artwork>
      </figure>

      <t>
        All CCNx messages are encapsulated in UDP packets to traverse virtual links,
        as shown below.
      </t>

      <figure>
        <artwork align="left"><![CDATA[
+----+-----+--------------------------------+
| IP | UDP |       CCNx Packet              |
+----+--------------------------------------+
            \_____________||________________/
                          \/
           +--------------------------------+
           | Headers |  Message | Validation|
           +--------------------------------+
        ]]></artwork>
      </figure>

      <t>
        Although simple, there are several details that must be solved to run CCNx over UDP.
        Below is a list of the basic requirements that are needed by any viable solution
        to realize interoperability.

        <list style="symbols">
          <t>Link negotiation (used for some items below) to create a link</t>
          <t>Configurable endpoint authentication (via DTLS or something similar)</t>
          <t>Address and port discovery (this may be out of scope)</t>
          <t>Identification of a single UDP link as an ID for th peer</t>
          <t>Bidirectional NAT/firewall traversal</t>
          <t>Flexible MTU size (or discovery?)</t>
          <t>In-order message delivery (??)</t>
          <t>Reliance on IP-layer fragmentation</t>
          <t>UDP encapsulation and decapsulation logic</t>
        </list>
      </t>

      <section title="UDP Assumptions">
        <t>
          We make several assumptions about the <xref target="UDP">UDP</xref> protocol in this
          document. For brevity, we list them here.
          <list style="symbols">
            <t>UDP is an unreliable datagram service (i.e., best-effort datagram delivery).</t>
            <t>Maximum MTU size of 4KB</t>
            <t>... what else?</t>
          </list>
        </t>

  <!-- NACHO:
  Section 3, describe the assumptions we have about UDP.
  Basically, unreliable datagram service, best effort. architectural MTU maxiums, etc.
  -->
  <!-- CAW: done. -->

      </section>

    </section>

    <section title="Specification">
      <t>
        We now describe the main specifications for running CCNx over UDP. For clarity,
        this specification is divided into the following parts: supported messages,
        message encoding, options, link initialization, link maintenance, and link teardown.
      </t>

      <t>
        Recall that the general way in which CCNx is run over UDP is via encapsulation. Links
        between two CCNx endpoints are created (as described below) and then used to transport CCNx
        messages between both endpoints. Each link is virtual and may traverse multiple
        IP hops (e.g., routers, switches, etc.) before reaching the endpoint. Moreover, each
        endhost of a given link is authenticated before it is used for transmission
        purposes (this may become an optional requirement). Per-link options such as
        the MTU, encryption requirements, etc. will be specified here or provided as
        options that are agreed upon during link initialization.
      </t>

      <section title="Supported Messages">
        <t>
          TODO: Interest, Content Objects, Interest Returns,...
        </t>
      </section>

      <section title="Message Encoding">
        <t>
          TODO
        </t>
      </section>

      <section title="Options">
        <t>
          TODO
        </t>
      </section>

      <section title="Link Initialization">
        <t>
          TODO
        </t>
      </section>

      <section title="Link Maintenance">
        <t>
          TODO
        </t>
      </section>

      <section title="Link Teardown">
        <t>
          TODO
        </t>
      </section>
    </section>

    <section title="Current Implementation of CCNx Over UDP">

      <t>
        This section describes different implementations of CCNx over UDP. Deviations
        from the above specification requirements are noted where appropriate.
      </t>

      <section title="CCNx 1.0 Implementation">

        <t>
          Currently, CCNx is run directly over UDP with no dynamic configuration. That is,
          UDP is used to create a (virtual) link between two endpoints so that CCNx messages
          can be exchanged. We make the following assumptions about UDP:
        </t>

        <t>A list of details pertaining to the setup and transportation of these packets between endpoints is below.

          <list style="symbols">
            <t>The MTU size is fixed at 4K.</t>
            <t>Fragmentation happens at the IP layer (i.e., using IPv4 fragmentation or path MTU discovery for IPv6).</t>
            <t>Links are identified by source/destination IP addresses and ports.</t>
            <t>UDP socket connections are used to communicate between endpoints in the forwarder.</t>
            <t>Endpoints are not authenticated.</t>

            <!-- TODO -->
            <!-- <t>UDP sockets are sent and received on port XXX</t> -->
          </list>
        </t>

        <t>
          The current implementation does not provide solutions to or deal with the following problems:
          <list style="symbols">
            <t>Reverse-path forwarding is not guaranteed with the presence of network firewalls.</t>
            <t>End-point authentication is not provided without a higher-level protocol.</t>
          </list>
        </t>
      </section>

      <section title="ccn-lite Implementation">
        <t>
          TODO
        </t>
      </section>
    </section>

    <section title="Open Questions and Design Decisions">

      <t>
        In this section we describe open questions and design decisions that should be addressed for
        a more robust way to run CCNx over UDP, i.e., not one that that is static.
      </t>

      <t>Question 1: How should endpoints be authenticated? What form of "connection proof" is needed in each message?
      <list style="symbols">
        <t>One answer: Use DTLS (datagram-based TLS)</t>
      </list>
      </t>

      <t>Question 2: Should the link be encrypted? If so, with what kind of encryption? What other security guarantees are needed?
      <list style="symbols">
        <t>TBD</t>
      </list>
      </t>

      <t>Question 3: Is there a better approach to handle link fragmentation and MTU configuration or discovery when using encapsulation?
      <list style="symbols">
        <t>TBD</t>
      </list>
      </t>

      <t>Question 4: How should links be established? What kind of negotiation should take place?
      <list style="symbols">
        <t>TBD</t>
      </list>
      </t>

      <t>Question 5: How can we support multiple protocols (e.g., multiplexing CCNx and NDN) via this same encapsulation technique?
      <list style="symbols">
        <t>TBD</t>
      </list>
      </t>

      <t>Question 6: Do we require in-order delivery assurance of CCNx messages?
      <list style="symbols">
        <t>TBD</t>
      </list>
      </t>

      <t>Question 7: How should retransmissions be handled over UDP?
      <list style="symbols">
        <t>TBD</t>
      </list>
      </t>

      <t>Question 8: How can we support reverse-path forwarding in the presence of network firewalls? Should we rely on intelligent firewall algorithms to allow reverse path messages to traverse the barrier?
      <list style="symbols">
        <t>TBD</t>
      </list>
      </t>

      <!-- NEW -->

      <t>Question 9: Will UDP ports be well known?
      <list style="symbols">
        <t>TBD</t>
      </list>
      </t>

      <t>Question 10: How will virtual links co-exist or collaborate with links established with NDNLP?
      <list style="symbols">
        <t>TBD</t>
      </list>
      </t>

<!--
<t>Question 7: What is the best way to to support multiple links over UDP ports?
<list style="symbols">
<t>TBD</t>
</list>
</t>
-->

<!--
- mode/phases: cold, setup, operational, tear-down plus transition diagram. Is there a Reset msg? Keep-alive beacons?
- modal or not? (single-protocol-plus-switch or parallel versions)
- relation to fragmentation and msg packing (multiple CCNx msgs in one UDP datagram)
- relation to NDNLP
- LAN broadcast
- flow control
- flow pacing (tcp friendliness), priorities
- integration in service discovery, zeroconf
- IANA entry in /etc/services ?
-->

    </section>

    <section title="Out of Scope Items and Issues">
      <!-- TODO -->
    </section>

    <section anchor="Acknowledgements" title="Acknowledgements">
      <!-- empty -->
    </section>

    <!-- Possibly a 'Contributors' section ... -->

    <section anchor="IANA" title="IANA Considerations">
      <t>This memo includes no request to IANA.</t>

      <t>All drafts are required to have an IANA considerations section (see <xref target="RFC5226"
          >Guidelines for Writing an IANA Considerations Section in RFCs</xref> for a guide). If the
        draft does not require IANA to do anything, the section contains an explicit statement that
        this is the case (as above). If there are no requirements for IANA, the section will be
        removed during conversion into an RFC by the RFC Editor.</t>
    </section>

    <section anchor="Security" title="Security Considerations">
      <t>All drafts are required to have a security considerations section. See <xref
          target="RFC3552">RFC 3552</xref> for a guide.</t>
    </section>
  </middle>

  <!--  *****BACK MATTER ***** -->

  <back>
    <!-- References split into informative and normative -->

    <!-- There are 2 ways to insert reference entries from the citation libraries:
    1. define an ENTITY at the top, and use "ampersand character"RFC2629; here (as shown)
    2. simply use a PI "less than character"?rfc include="reference.RFC.2119.xml"?> here
       (for I-Ds: include="reference.I-D.narten-iana-considerations-rfc2434bis.xml")

    Both are cited textually in the same manner: by using xref elements.
    If you use the PI option, xml2rfc will, by default, try to find included files in the same
    directory as the including file. You can also define the XML_LIBRARY environment variable
    with a value containing a set of directories to search. These can be either in the local
    filing system or remote ones accessed by http (http://domain/dir/... ).-->

    <references title="Normative References">
      <!--?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml"?-->
      &RFC2119;
      &RFC5234;
      <reference anchor="CCNTlv" target="http://tools.ietf.org/html/draft-mosko-icnrg-ccnxmessages-01">
        <front>
          <title>CCNx Messages in TLV Format (Internet draft)</title>
          <author initials='M.' surname='Mosko' fullname='Marc Mosko'>
            <organization>PARC, Inc.</organization>
          </author>
          <author initials='I.' surname='Solis' fullname='Ignacio Solis'>
            <organization>PARC, Inc.</organization>
          </author>
          <date year="2015"/>
        </front>
      </reference>

      <reference anchor="UDP" target="https://www.ietf.org/rfc/rfc768.txt">
        <front>
          <title>User Datagram Protocol</title>
          <author initials='J.' surname='Postel' fullname='Jon Postel'>
            <organization>ISI</organization>
          </author>
          <date year="1980"/>
        </front>
      </reference>

      <reference anchor="TCP" target="https://www.ietf.org/rfc/rfc793.txt">
        <front>
          <title>Transmission Control Protocol</title>
          <author initials='J.' surname='Postel' fullname='Jon Postel'>
            <organization>ISI</organization>
          </author>
          <date year="1981"/>
        </front>
      </reference>
    </references>

    <!-- https://www.ietf.org/rfc/rfc768.txt -->

    <references title="Informative References">
      <!-- Here we use entities that we defined at the beginning. --> &RFC3552; &RFC5226;
      <!-- A reference written by by an organization not a person. -->

      <reference anchor="CCN" target="http://www.CCNx.org">
        <front>
          <title>CCNx Open Source</title>

          <author>
            <organization>PARC, Inc.</organization>
          </author>

          <date year="2015"/>
        </front>
      </reference>
    </references>

  </back>
</rfc>
